{"version":3,"file":"js/484.cc5828d2.js","mappings":"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","sources":["webpack://will-portfolio/../../../src/js/util/util.js","webpack://will-portfolio/../../../src/js/util/dom-events.js","webpack://will-portfolio/../../../src/js/util/viewport-size.js","webpack://will-portfolio/../../../src/js/slide/pan-bounds.js","webpack://will-portfolio/../../../src/js/slide/zoom-level.js","webpack://will-portfolio/../../../src/js/slide/slide.js","webpack://will-portfolio/../../../src/js/gestures/drag-handler.js","webpack://will-portfolio/../../../src/js/gestures/zoom-handler.js","webpack://will-portfolio/../../../src/js/gestures/tap-handler.js","webpack://will-portfolio/../../../src/js/gestures/gestures.js","webpack://will-portfolio/../../../src/js/main-scroll.js","webpack://will-portfolio/../../../src/js/keyboard.js","webpack://will-portfolio/../../../src/js/util/css-animation.js","webpack://will-portfolio/../../../src/js/util/spring-easer.js","webpack://will-portfolio/../../../src/js/util/spring-animation.js","webpack://will-portfolio/../../../src/js/util/animations.js","webpack://will-portfolio/../../../src/js/scroll-wheel.js","webpack://will-portfolio/../../../src/js/ui/ui-element.js","webpack://will-portfolio/../../../src/js/ui/button-arrow.js","webpack://will-portfolio/../../../src/js/ui/button-close.js","webpack://will-portfolio/../../../src/js/ui/button-zoom.js","webpack://will-portfolio/../../../src/js/ui/loading-indicator.js","webpack://will-portfolio/../../../src/js/ui/counter-indicator.js","webpack://will-portfolio/../../../src/js/ui/ui.js","webpack://will-portfolio/../../../src/js/slide/get-thumb-bounds.js","webpack://will-portfolio/../../../src/js/core/eventable.js","webpack://will-portfolio/../../../src/js/slide/placeholder.js","webpack://will-portfolio/../../../src/js/slide/content.js","webpack://will-portfolio/../../../src/js/core/base.js","webpack://will-portfolio/../../../src/js/opener.js","webpack://will-portfolio/../../../src/js/slide/loader.js","webpack://will-portfolio/../../../src/js/photoswipe.js"],"sourcesContent":["/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are qual\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string=} prop CSS property to animate\r\n * @param {number=} duration in ms\r\n * @param {string=} ease CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode();\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nexport function specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {HTMLElement | NodeListOf<HTMLElement> | string} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n","// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document} target\r\n * @prop {string} type\r\n * @prop {(e: any) => void} listener\r\n * @prop {boolean} passive\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type Can be multiple, separated by space.\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean} passive\r\n   * @param {boolean=} unbind Whether the event should be added or removed\r\n   * @param {boolean=} skipPool Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default DOMEvents;\r\n","/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","import {\r\n  clamp\r\n} from '../util/util.js';\r\nimport { parsePaddingOption } from '../util/viewport-size.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n\r\n    this.currZoomLevel = 1;\r\n\r\n    /** @type {Point} */\r\n    this.center = {};\r\n    /** @type {Point} */\r\n    this.max = {};\r\n    /** @type {Point} */\r\n    this.min = {};\r\n\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By defaul it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\r\n\r\nexport default PanBounds;\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @typedef {_SlideData & Record<string, any>} SlideData\r\n * @typedef {Object} _SlideData\r\n * @prop {HTMLElement=} element thumbnail element\r\n * @prop {string=} src image URL\r\n * @prop {string=} srcset image srcset\r\n * @prop {number=} w image width (deprecated)\r\n * @prop {number=} h image height (deprecated)\r\n * @prop {number=} width image width\r\n * @prop {number=} height image height\r\n * @prop {string=} msrc placeholder image URL that's displayed before large image is loaded\r\n * @prop {string=} alt image alt text\r\n * @prop {boolean=} thumbCropped whether thumbnail is cropped client-side or not\r\n * @prop {string=} html html content of a slide\r\n * @prop {'image' | 'html' | string} [type] slide type\r\n */\r\n\r\nimport {\r\n  createElement,\r\n  setTransform,\r\n  equalizePoints,\r\n  roundPoint,\r\n  toTransformString,\r\n  clamp,\r\n} from '../util/util.js';\r\n\r\nimport PanBounds from './pan-bounds.js';\r\nimport ZoomLevel from './zoom-level.js';\r\nimport { getPanAreaSize } from '../util/viewport-size.js';\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = {};\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.pan = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap');\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      this.holderElement.innerHTML = '';\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    this.load();\r\n    this.appendHeavy();\r\n    this.updateContentSize();\r\n\r\n    this.holderElement.innerHTML = '';\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load();\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean=} force if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getPlaceholderElement() {\r\n    if (this.content.placeholder) {\r\n      return this.content.placeholder.element;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {{ x?: number; y?: number }} centerPoint\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean=} ignoreBounds Minimum and maximum zoom levels will be ignored.\r\n   * @return {boolean=} Returns true if animated.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {{ x?: number, y?: number }} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {{ x?: number; y?: number }} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number=} prevZoomLevel Zoom level before new zoom was applied.\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   */\r\n  isPannable() {\r\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.width && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\r\n\r\nexport default Slide;\r\n","import {\r\n  equalizePoints, roundPoint, clamp\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = {};\r\n  }\r\n\r\n  start() {\r\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && pswp.options.closeOnVerticalDrag\r\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        roundPoint(currSlide.pan);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { pswp, velocity } = this.gestures;\r\n    const { mainScroll } = pswp;\r\n    let indexDiff = 0;\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is vicible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    const { velocity } = this.gestures;\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Inceasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta) {\r\n      return;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n  }\r\n  //\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - this.pswp.currSlide.bounds.center.y)\r\n            / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number=} customFriction (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { pan, bounds } = this.pswp.currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DragHandler;\r\n","import {\r\n  equalizePoints, getDistanceBetween, clamp, pointsEqual\r\n} from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = this.gestures.pswp;\r\n    /** @type {Point} */\r\n    this._startPan = {};\r\n\r\n    /** @type {Point} */\r\n    this._startZoomPoint = {};\r\n    /** @type {Point} */\r\n    this._zoomPoint = {};\r\n  }\r\n\r\n  start() {\r\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\r\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean=} ignoreGesture\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === undefined) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({}, currSlide.pan);\r\n    let destinationPan = equalizePoints({}, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    let panNeedsChange = true;\r\n    if (pointsEqual(destinationPan, initialPan)) {\r\n      panNeedsChange = false;\r\n    }\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default ZoomHandler;\r\n","/**\r\n * @template T\r\n * @template P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\r\n\r\nexport default TapHandler;\r\n","import {\r\n  equalizePoints, pointsEqual, getDistanceBetween\r\n} from '../util/util.js';\r\n\r\nimport DragHandler from './drag-handler.js';\r\nimport ZoomHandler from './zoom-handler.js';\r\nimport TapHandler from './tap-handler.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y'} */\r\n    this.dragAxis = undefined;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = {}; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = {}; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = {};\r\n    /** @type {Point} */\r\n    this.prevP2 = {};\r\n    /** @type {Point} */\r\n    this.startP1 = {};\r\n    /** @type {Point} */\r\n    this.startP2 = {};\r\n    /** @type {Point} */\r\n    this.velocity = {};\r\n\r\n    /** @type {Point} */\r\n    this._lastStartP1 = {};\r\n    /** @type {Point} */\r\n    this._intervalP1 = {};\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]} */\r\n    this._ongoingPointers = [];\r\n\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\r\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\r\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\r\n    events.add(window, pref + up, this.onPointerUp.bind(this));\r\n    if (cancelEvent) {\r\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    let isMousePointer;\r\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\r\n      isMousePointer = true;\r\n    }\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    this.pointerDown = true;\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this.pointerDown = false;\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @param {boolean=} force\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\r\n        return ongoingPoiner.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {}));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // update points that were used during previous rAF tick\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  // update points at the start of gesture\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Gestures;\r\n","import {\r\n  setTransform,\r\n  createElement,\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n\r\n    /** @type {number} */\r\n    this.slideWidth = undefined;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = undefined;\r\n\r\n    this.resetPosition();\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean=} resizeSlides Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', false, this.pswp.container);\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean=} animate\r\n   * @param {number=} velocityX\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    if (diff) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n        this._containerShiftIndex++;\r\n\r\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n        this._containerShiftIndex--;\r\n\r\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1].slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    pswp.currSlide.applyCurrentZoomPan();\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean=} dragging\r\n   */\r\n  moveTo(x, dragging) {\r\n    /** @type {number} */\r\n    let newSlideIndexOffset;\r\n    /** @type {number} */\r\n    let delta;\r\n\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n    setTransform(this.pswp.container, x);\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\r\n  }\r\n}\r\n\r\nexport default MainScroll;\r\n","import { specialKeyUsed } from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Heps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\r\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  _focusRoot() {\r\n    if (!this._wasFocused) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe>} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y'} */\r\n    let axis;\r\n    let isForward;\r\n\r\n    switch (e.keyCode) {\r\n      case 27: // esc\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case 90: // z key\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case 37: // left\r\n        axis = 'x';\r\n        break;\r\n      case 38: // top\r\n        axis = 'y';\r\n        break;\r\n      case 39: // right\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case 40: // bottom\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case 9: // tab\r\n        this._focusRoot();\r\n        break;\r\n      default:\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Keyboard;\r\n","import { setTransitionStyle, removeTransitionStyle } from './util.js';\r\n\r\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish\r\n      // opacity\r\n    } = props;\r\n\r\n    let {\r\n      duration,\r\n      easing,\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop];\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n\r\n    duration = duration || 333;\r\n    easing = easing || DEFAULT_EASING;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transiton won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._firstFrameTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._firstFrameTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._firstFrameTimeout) {\r\n      clearTimeout(this._firstFrameTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\r\n\r\nexport default CSSAnimation;\r\n","const DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} dampingRatio\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} naturalFrequency\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency = this._naturalFrequency\r\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\r\n\r\nexport default SpringEaser;\r\n","import SpringEaser from './spring-easer.js';\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish,\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = null;\r\n  }\r\n}\r\n\r\nexport default SpringAnimation;\r\n","import CSSAnimation from './css-animation.js';\r\nimport SpringAnimation from './spring-animation.js';\r\n\r\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n\r\n/**\r\n * @typedef {Object} AnimationProps\r\n *\r\n * @prop {HTMLElement=} target\r\n *\r\n * @prop {string=} name\r\n *\r\n * @prop {number=} start\r\n * @prop {number=} end\r\n * @prop {number=} duration\r\n * @prop {number=} velocity\r\n * @prop {number=} dampingRatio\r\n * @prop {number=} naturalFrequency\r\n *\r\n * @prop {(end: number) => void} [onUpdate]\r\n * @prop {() => void} [onComplete]\r\n * @prop {() => void} [onFinish]\r\n *\r\n * @prop {string=} transform\r\n * @prop {string=} opacity\r\n * @prop {string=} easing\r\n *\r\n * @prop {boolean=} isPan\r\n * @prop {boolean=} isMainScroll\r\n */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   * @param {boolean=} isSpring\r\n   */\r\n  _start(props, isSpring) {\r\n    /** @type {Animation} */\r\n    let animation;\r\n    if (isSpring) {\r\n      animation = new SpringAnimation(props);\r\n    } else {\r\n      animation = new CSSAnimation(props);\r\n    }\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\r\n\r\nexport default Animations;\r\n","/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', this._onWheel.bind(this));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default ScrollWheel;\r\n","import { createElement } from '../util/util.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean=} isCustomSVG\r\n * @prop {string} inner\r\n * @prop {string=} outlineID\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string=} className\r\n * @prop {UIElementMarkup=} html\r\n * @prop {boolean=} isButton\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string=} title\r\n * @prop {string=} ariaLabel\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number=} order\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    /** @type {HTMLElement} */\r\n    let element;\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      // create button element\r\n      element = createElement(className, tagName);\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      if (ariaLabel || title) {\r\n        /** @type {HTMLElement} */ (element).setAttribute('aria-label', ariaLabel || title);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          pswp[data.onClick]();\r\n        } else {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    let container;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      } else {\r\n        // root element\r\n        container = pswp.element;\r\n      }\r\n    }\r\n\r\n    container.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\r\n\r\nexport default UIElement;\r\n","/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean=} isNextButton\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nexport const arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\r\n\r\nexport default closeButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\r\n\r\nexport default zoomButton;\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout} */\r\n    let delayTimeout;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(pswp.currSlide.content.isLoading());\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n  }\r\n};\r\n","/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nexport const counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\r\n","import UIElement from './ui-element.js';\r\nimport { arrowPrev, arrowNext } from './button-arrow.js';\r\nimport closeButton from './button-close.js';\r\nimport zoomButton from './button-zoom.js';\r\nimport { loadingIndicator } from './loading-indicator.js';\r\nimport { counterIndicator } from './counter-indicator.js';\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = undefined;\r\n\r\n    /** @type {number} */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element.classList[pswp.getNumItems() === 1 ? 'add' : 'remove']('pswp--one-slide');\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    if (this.pswp.opener.isClosing) {\r\n      return;\r\n    }\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n    const secondaryIsHigher = (currZoomLevelDiff < 0);\r\n\r\n    if (currZoomLevel === currSlide.zoomLevels.secondary) {\r\n      setZoomedIn(template, secondaryIsHigher);\r\n    } else if (currZoomLevel > currSlide.zoomLevels.secondary) {\r\n      setZoomedIn(template, true);\r\n    } else {\r\n      //  if (currZoomLevel < currSlide.zoomLevels.secondary)\r\n      setZoomedIn(template, false);\r\n    }\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\r\n\r\nexport default UI;\r\n","/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nexport function getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  let thumbBounds;\r\n  /** @type {HTMLElement} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : element.querySelector(thumbSelector);\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w,\r\n        itemData.height || itemData.h\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\r\n","/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hiden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (!this.placeholder && this.slide && this.usePlaceholder()) {\r\n      // use   -based placeholder only for the first slide,\r\n      // as rendering (even small stretched thumbnail) is an expensive operation\r\n      const placeholderSrc = this.instance.applyFilters(\r\n        'placeholderSrc',\r\n        (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n        this\r\n      );\r\n      this.placeholder = new Placeholder(\r\n        placeholderSrc,\r\n        this.slide.container\r\n      );\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.loadImage(isLazy);\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = createElement('pswp__img', 'img');\r\n    this.element = imageElement;\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.slide.container.innerHTML = '';\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n\r\n      // Handle srcset sizes attribute.\r\n      //\r\n      // Never lower quality, if it was increased previously.\r\n      // Chrome does this automatically, Firefox and Safari do not,\r\n      // so we store largest used size in dataset.\r\n      if (image.srcset\r\n          // eslint-disable-next-line max-len\r\n          && (!image.dataset.largestUsedSize || width > parseInt(image.dataset.largestUsedSize, 10))) {\r\n        image.sizes = width + 'px';\r\n        image.dataset.largestUsedSize = String(width);\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerHTML = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      if (this.slide\r\n          && !this.slide.isActive\r\n          && ('decode' in this.element)) {\r\n        this.isDecoding = true;\r\n        // Make sure that we start decoding on the next frame\r\n        requestAnimationFrame(() => {\r\n          // element might change\r\n          if (this.element && this.element.tagName === 'IMG') {\r\n            /** @type {HTMLImageElement} */\r\n            (this.element).decode().then(() => {\r\n              this.isDecoding = false;\r\n              requestAnimationFrame(() => {\r\n                this.appendImage();\r\n              });\r\n            }).catch(() => {\r\n              this.isDecoding = false;\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        if (this.placeholder\r\n          // eslint-disable-next-line max-len\r\n          && (this.state === LOAD_STATE.LOADED || /** @type {LoadState} */ (this.state) === LOAD_STATE.ERROR)\r\n        ) {\r\n          this.removePlaceholder();\r\n        }\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n\r\n      if (this.placeholder\r\n        && (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR)) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import Eventable from './eventable.js';\r\nimport {\r\n  getElementsFromOption\r\n} from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe.js\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if ('length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if ('gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    // @ts-expect-error\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    // eslint-disable-next-line max-len\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (element.tagName === 'A' ? element : element.querySelector('a'));\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","import {\r\n  setTransform,\r\n  equalizePoints,\r\n  decodeImage,\r\n  toTransformString\r\n} from './util/util.js';\r\n\r\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    /** @type {false | Bounds} */\r\n    this._thumbBounds = undefined;\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return false;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n\r\n    return true;\r\n  }\r\n\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = false;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = false;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = (this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && (slide.content && slide.content.usePlaceholder())\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\r\n\r\n      pswp.container.style.overflow = 'hidden';\r\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.element.style.opacity = '1';\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve();\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve();\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  _initiate() {\r\n    this.pswp.element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      pswp.currSlide.zoomAndPanToInitial();\r\n      this._animateTo(\r\n        pswp.currSlide.container,\r\n        'transform',\r\n        pswp.currSlide.getCurrentTransform()\r\n      );\r\n    }\r\n\r\n    if (this._animateBgOpacity) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    if (this._animateBgOpacity\r\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {boolean=} animate\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n\r\n    if (animate) {\r\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n    } else {\r\n      currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\r\n\r\nexport default Opener;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number=} diff Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  loadSlideByIndex(index) {\r\n    index = this.pswp.getLoopedIndex(index);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n\r\n    if (content) {\r\n      // assign slide to content\r\n      content.setSlide(slide);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = null;\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import {\r\n  createElement,\r\n  equalizePoints,\r\n  pointsEqual,\r\n  clamp,\r\n} from './util/util.js';\r\n\r\nimport DOMEvents from './util/dom-events.js';\r\nimport Slide from './slide/slide.js';\r\nimport Gestures from './gestures/gestures.js';\r\nimport MainScroll from './main-scroll.js';\r\n\r\nimport Keyboard from './keyboard.js';\r\nimport Animations from './util/animations.js';\r\nimport ScrollWheel from './scroll-wheel.js';\r\nimport UI from './ui/ui.js';\r\nimport { getViewportSize } from './util/viewport-size.js';\r\nimport { getThumbBounds } from './slide/get-thumb-bounds.js';\r\nimport PhotoSwipeBase from './core/base.js';\r\nimport Opener from './opener.js';\r\nimport ContentLoader from './slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x?: number; y?: number; id?: string | number }} Point */\r\n/** @typedef {{ x?: number; y?: number }} Size */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeOptions https://photoswipe.com/options/\r\n *\r\n * @prop {DataSource=} dataSource\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number=} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number=} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean=} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean=} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean=} wheelToZoom\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean=} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean=} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding=} padding\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Size, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} [hideAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [showAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [zoomAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string=} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean=} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean=} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean=} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean=} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} [imageClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [bgClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [tapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [doubleTapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number=} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string=} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipe) => { x: number; y: number }} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string=} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]=} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string=} mainClass\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement=} appendToEl\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number=} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string=} closeTitle\r\n * Translating\r\n *\r\n * @prop {string=} zoomTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowNextTitle\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number=} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean=} arrowPrev\r\n * @prop {boolean=} arrowNext\r\n * @prop {boolean=} zoom\r\n * @prop {boolean=} close\r\n * @prop {boolean=} counter\r\n *\r\n * @prop {string=} arrowPrevSVG\r\n * @prop {string=} arrowNextSVG\r\n * @prop {string=} zoomSVG\r\n * @prop {string=} closeSVG\r\n * @prop {string=} counterSVG\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * @prop {string=} arrowNextTitle\r\n * @prop {string=} zoomTitle\r\n * @prop {string=} closeTitle\r\n * @prop {string=} counterTitle\r\n *\r\n * @prop {ZoomLevelOption=} initialZoomLevel\r\n * @prop {ZoomLevelOption=} secondaryZoomLevel\r\n * @prop {ZoomLevelOption=} maxZoomLevel\r\n *\r\n * @prop {boolean=} mouseMovePan\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean=} showHideOpacity\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean=} preloadFirstSlide\r\n * @prop {string=} gallery\r\n * @prop {string=} gallerySelector\r\n * @prop {string=} children\r\n * @prop {string=} childSelector\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this._prepareOptions(options);\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.offset = {};\r\n\r\n    /**\r\n     * @type {{ x?: number; y?: number }}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = {};\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.viewportSize = {};\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     *\r\n     * @type {number}\r\n     */\r\n    this.bgOpacity = 1;\r\n\r\n    /** @type {HTMLDivElement} */\r\n    this.topBar = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n\r\n    /** @type {Animations} */\r\n    this.animations = new Animations();\r\n\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    this.element.className += ' ' + rootClasses;\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      // Add content to the previous and next slide\r\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\r\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\r\n\r\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\r\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    index = clamp(index, 0, numSlides - 1);\r\n\r\n    return index;\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.appendHeavy();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this.listeners = null;\r\n\r\n    this.scrollWrap.ontouchmove = null;\r\n    this.scrollWrap.ontouchend = null;\r\n\r\n    this.element.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.destroy();\r\n      }\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = this.currSlide.index - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          /** @type {Slide} */\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean=} force If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = null;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean=} force Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', false, this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', false, this.element);\r\n    this.container = createElement('pswp__container', false, this.scrollWrap);\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continious loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   * @private\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PhotoSwipeOptions}*/\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\r\n\r\nexport default PhotoSwipe;\r\n"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","style","transform","defaultCSSEasing","setTransitionStyle","prop","duration","ease","transition","setWidthHeight","w","h","width","height","removeTransitionStyle","decodeImage","img","decode","complete","Promise","resolve","reject","onload","onerror","LOAD_STATE","IDLE","LOADING","LOADED","ERROR","specialKeyUsed","e","which","ctrlKey","metaKey","altKey","shiftKey","getElementsFromOption","option","legacySelector","parent","elements","Element","NodeList","Array","isArray","from","selector","querySelectorAll","supportsPassive","window","addEventListener","Object","defineProperty","get","DOMEvents","constructor","this","_pool","add","target","type","listener","passive","_toggleListener","remove","removeAll","forEach","poolItem","unbind","skipPool","methodName","types","split","eType","filter","push","eventOptions","getViewportSize","options","pswp","getViewportSizeFn","newViewportSize","documentElement","clientWidth","innerHeight","parsePaddingOption","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","getPanAreaSize","PanBounds","slide","currZoomLevel","center","reset","update","_updateAxis","dispatch","axis","elSize","paddingProp","data","panAreaSize","correctPan","panOffset","MAX_IMAGE_WIDTH","ZoomLevel","maxWidth","maxHeight","elementSize","hRatio","vRatio","fit","fill","vFill","initial","_getInitial","secondary","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","Number","Slide","isActive","currIndex","currentResolution","isFirstSlide","opener","isOpen","pan","content","contentLoader","getContentBySlide","container","bounds","prevDisplayedWidth","prevDisplayedHeight","setIsActive","activate","deactivate","append","holderElement","calculateSize","transformOrigin","load","appendHeavy","updateContentSize","innerHTML","zoomAndPanToInitial","applyCurrentZoomPan","appendHeavyNearby","heavyAppended","mainScroll","isShifted","defaultPrevented","destroy","hasSlide","resize","panTo","force","scaleMultiplier","sizeChanged","setDisplayedSize","getPlaceholderElement","placeholder","element","zoomTo","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","isZoomable","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","name","getCurrentTransform","onComplete","easing","toggleZoom","zoomAnimationDuration","point","totalPanDistance","getViewportCenterPoint","zoomFactor","panX","panY","isPannable","_applyZoomTransform","currSlide","zoom","newResolution","PAN_END_FRICTION","VERTICAL_DRAG_FRICTION","MIN_RATIO_TO_CLOSE","MIN_NEXT_SLIDE_SPEED","project","initialVelocity","decelerationRate","DragHandler","gestures","startPan","start","stopAll","change","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","mainScrollChanged","_panOrMoveMainScroll","end","velocity","indexDiff","mainScrollShiftDiff","getCurrSlideX","currentSlideVisibilityRatio","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","moveTo","newPan","allowPanToNext","currSlideMainScrollX","isLeftToRight","isRightToLeft","wasAtMinPanPosition","wasAtMaxPanPosition","potentialPan","customFriction","correctedPan","UPPER_ZOOM_FRICTION","LOWER_ZOOM_FRICTION","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_startZoomLevel","_wasOverFitZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","event","closest","TapHandler","click","originalEvent","targetClassList","classList","isImageClick","contains","isBackgroundClick","_doClickOrTapAction","tap","doubleTap","actionName","actionFullName","clickToCloseNonZoomable","toggle","call","AXIS_SWIPE_HYSTERISIS","DOUBLE_TAP_DELAY","MIN_TAP_DISTANCE","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","navigator","maxTouchPoints","drag","tapHandler","on","events","scrollWrap","_onClick","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","bind","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","pointerDown","_clearTapTimer","preventDefault","isDragging","isZooming","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","_intervalTime","Date","_velocityCalculated","_updateVelocity","_finishTap","_updatePrevPoints","raf","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","_tapTimer","setTimeout","clearTimeout","displacement","cancelAnimationFrame","pointerEvent","pointerIndex","findIndex","ongoingPoiner","pointerId","splice","_convertEventPosToPoint","length","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MAIN_SCROLL_END_FRICTION","MainScroll","slideWidth","itemHolders","resetPosition","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","_containerShiftIndex","_currPositionIndex","_prevPositionIndex","appendHolders","i","display","canBeSwiped","getNumItems","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","updateLazy","dragging","newSlideIndexOffset","Keyboard","initialPointerPos","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","activeElement","returnFocus","_wasFocused","focus","keydownAction","isForward","keyCode","escKey","arrowKeys","template","DEFAULT_EASING","CSSAnimation","props","onFinish","_target","_onComplete","_onTransitionEnd","_firstFrameTimeout","_finalizeAnimation","_finished","removeEventListener","DEFAULT_NATURAL_FREQUENCY","DEFAULT_DAMPING_RATIO","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","easeFrame","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","easer","prevTime","animationLoop","_raf","Animations","activeAnimations","_start","isSpring","animation","stop","isPanRunning","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","clientX","clientY","addElementHTML","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","UIElement","elementHTML","html","isButton","toLowerCase","title","ariaLabel","setAttribute","onInit","onClick","onclick","appendTo","topBar","applyFilters","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","toggleIndicatorClass","setIndicatorVisibility","visible","updatePreloaderVisibility","isLoading","preloaderDelay","ui","counterIndicator","counterElement","innerText","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","_lastUpdatedZoomLevel","init","isRegistered","uiElementsData","sort","a","b","items","uiElementData","registerElement","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","secondaryIsHigher","imageClickAction","getBoundsByElement","thumbAreaRect","getBoundingClientRect","left","top","getCroppedBoundsByElement","imageWidth","imageHeight","fillZoomLevel","offsetX","offsetY","innerRect","getThumbBounds","instance","thumbBounds","thumbnail","thumbSelector","matches","querySelector","thumbCropped","PhotoSwipeEvent","details","assign","Eventable","_listeners","_filters","addFilter","fn","priority","f1","f2","removeFilter","args","apply","off","Placeholder","imageSrc","decoding","alt","src","parentNode","Content","isAttached","state","removePlaceholder","keepPlaceholder","isLazy","reload","usePlaceholder","placeholderSrc","msrc","isImageContent","loadImage","imageElement","srcset","onLoaded","onError","setSlide","displayError","isError","image","dataset","largestUsedSize","parseInt","sizes","String","lazyLoad","errorMsgEl","errorMsg","isDecoding","then","appendImage","catch","PhotoSwipeBase","numItems","dataSource","_getGalleryDOMElements","gallery","createContentFromData","getItemData","dataSourceItem","_domElementToItemData","galleryElement","children","childSelector","linkEl","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","MIN_OPACITY","Opener","isClosed","_prepareOpen","_thumbBounds","open","isOpening","_duration","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","_croppedZoom","showAnimationDuration","showHideAnimationType","showHideOpacity","_initialThumbBounds","_placeholder","_useAnimation","_animateZoom","Boolean","_animateRootOpacity","_animateBgOpacity","_opacityElement","bg","opacity","_cropContainer1","_cropContainer2","overflow","_setClosedStateZoomPan","willChange","decoded","isDelaying","finally","_initiate","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","MIN_SLIDES_TO_CACHE","lazyLoadData","zoomLevel","ceil","lazyLoadSlide","ContentLoader","limit","preload","_cachedItems","loadSlideByIndex","getContentByIndex","addToCache","removeByIndex","indexToRemove","item","removedItem","find","defaultOptions","bgClickAction","tapAction","PhotoSwipe","super","_prepareOptions","_prevViewportSize","keyboard","isDestroying","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_initialItemData","_handlePageResize","_updatePageScrollOffset","goTo","next","prev","listeners","refreshSlideContent","slideIndex","potentialHolderIndex","holder","hasMouse","matchMedia","test","userAgent","setScrollOffset","body"],"sourceRoot":""}